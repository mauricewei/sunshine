# Generated by Django 2.1.4 on 2018-12-20 15:33

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Business',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60, verbose_name='业务名称')),
                ('lifecycle', models.CharField(blank=True, max_length=60, verbose_name='生命周期')),
                ('manager', models.CharField(blank=True, max_length=60, verbose_name='运维人员')),
                ('product_manager', models.CharField(blank=True, max_length=60, verbose_name='产品经理')),
                ('tester', models.CharField(blank=True, max_length=60, verbose_name='测试人员')),
                ('developer', models.CharField(blank=True, max_length=60, verbose_name='开发人员')),
                ('operator', models.CharField(blank=True, max_length=60, verbose_name='操作人员')),
            ],
        ),
        migrations.CreateModel(
            name='Cluster',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60, verbose_name='集群名称')),
                ('desc', models.TextField(blank=True, verbose_name='描述')),
                ('manager', models.CharField(blank=True, max_length=60, verbose_name='主要维护人')),
                ('bak_manager', models.CharField(blank=True, max_length=60, verbose_name='备份维护人')),
            ],
        ),
        migrations.CreateModel(
            name='Host',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('manufacturer', models.CharField(blank=True, max_length=100, verbose_name='厂商')),
                ('sn', models.CharField(blank=True, max_length=60, verbose_name='SN号')),
                ('manager', models.CharField(blank=True, max_length=60, verbose_name='主要维护人')),
                ('bak_manager', models.CharField(blank=True, max_length=60, verbose_name='备份维护人')),
                ('is_virtual', models.BooleanField(default=True)),
                ('host_status', models.CharField(choices=[('free', '空闲'), ('stoppage', '故障')], default='free', max_length=60, verbose_name='主机状态')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('modified_time', models.DateTimeField(auto_now_add=True, verbose_name='修改时间')),
                ('comment', models.TextField(blank=True, verbose_name='备注')),
                ('service_term', models.IntegerField(blank=True, verbose_name='质保年限')),
                ('sla', models.CharField(blank=True, choices=[('L1', '一级'), ('L2', '二级'), ('L3', '三级')], max_length=60, verbose_name='SLA级别')),
                ('cabinet', models.CharField(blank=True, max_length=60, verbose_name='机柜位置')),
                ('datacenter', models.CharField(blank=True, max_length=60, verbose_name='数据中心')),
                ('cpu_module', models.CharField(blank=True, max_length=100, verbose_name='cpu型号')),
                ('cpu_num', models.IntegerField(blank=True, verbose_name='cpu个数')),
                ('cpu_core_num', models.IntegerField(blank=True, verbose_name='cpu物理核心数')),
                ('cpu_core_count', models.IntegerField(blank=True, verbose_name='cpu逻辑核心数')),
                ('mem_mb', models.CharField(blank=True, max_length=60, verbose_name='内存大小(MB)')),
                ('disk_gb', models.CharField(blank=True, max_length=60, verbose_name='磁盘大小(GB)')),
                ('os_type', models.CharField(blank=True, choices=[('linux', 'Linux'), ('windows', 'Windows')], max_length=60, verbose_name='操作系统类型')),
                ('os_name', models.CharField(blank=True, max_length=60, verbose_name='操作系统名称')),
                ('os_version', models.CharField(blank=True, max_length=60, verbose_name='操作系统版本号')),
                ('os_bit', models.CharField(blank=True, max_length=60, verbose_name='操作系统位数')),
                ('host_name', models.CharField(blank=True, max_length=100, verbose_name='主机名称')),
                ('fqdn_name', models.CharField(blank=True, max_length=100, verbose_name='fqdn名称')),
                ('ipmi_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='IPMI地址')),
                ('host_innerip', models.GenericIPAddressField(verbose_name='内网IP地址')),
                ('host_outerip', models.GenericIPAddressField(blank=True, null=True, verbose_name='外网IP地址')),
                ('mac_addr', models.CharField(blank=True, max_length=60, verbose_name='内网MAC地址')),
                ('outer_mac_addr', models.CharField(blank=True, max_length=60, verbose_name='外网MAC地址')),
                ('business', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cmdb.Business', verbose_name='业务')),
                ('cluster', models.ManyToManyField(blank=True, to='cmdb.Cluster', verbose_name='业务')),
            ],
        ),
        migrations.CreateModel(
            name='Model',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60, verbose_name='模块名称')),
                ('desc', models.TextField(blank=True, verbose_name='描述')),
                ('status', models.CharField(blank=True, choices=[('open', '开启'), ('closed', '关闭')], max_length=60, verbose_name='服务状态')),
                ('comment', models.TextField(blank=True, verbose_name='备注')),
                ('business', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cmdb.Business', verbose_name='所属业务')),
            ],
        ),
        migrations.AddField(
            model_name='cluster',
            name='business',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cmdb.Model', verbose_name='所属模块'),
        ),
    ]
